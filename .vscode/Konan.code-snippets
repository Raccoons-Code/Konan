{
	// Place your Konan workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Class event": {
		"body": [
			"const { Event } = require('../classes');",
			"",
			"module.exports = class extends Event {",
			"  constructor(...args) {",
			"    super(...args, {",
			"      name: '${1:name}',",
			"    });",
			"  }",
			"",
			"  async execute(${2:params}) {",
			"    $0",
			"  }",
			"};",
		],
		"description": "class to event snippet",
		"prefix": "class event",
		"scope": "javascript,typescript"
	},
	"Class menu message command": {
		"body": [
			"const { ContextMenuCommandBuilder } = require('@discordjs/builders');",
			"const { MessageContextMenuInteraction } = require('discord.js');",
			"",
			"module.exports = class extends ContextMenuCommandBuilder {",
			"  constructor(client) {",
			"    super();",
			"    this.client = client;",
			"    this.data = this.setName('${1:name}')",
			"      .setType(3);",
			"  }",
			"",
			"  /** @param {MessageContextMenuInteraction} interaction */",
			"  async execute(interaction) {",
			"    $0",
			"  }",
			"};",
		],
		"description": "class to menu command snippet",
		"prefix": "class menu message command",
		"scope": "javascript,typescript"
	},
	"Class menu user command": {
		"body": [
			"const { ContextMenuCommandBuilder } = require('@discordjs/builders');",
			"const { UserContextMenuInteraction } = require('discord.js');",
			"",
			"module.exports = class extends ContextMenuCommandBuilder {",
			"  constructor(client) {",
			"    super();",
			"    this.client = client;",
			"    this.data = this.setName('${1:name}')",
			"      .setType(2);",
			"  }",
			"",
			"  /** @param {UserContextMenuInteraction} interaction */",
			"  async execute(interaction) {",
			"    $0",
			"  }",
			"};",
		],
		"description": "class to menu command snippet",
		"prefix": "class menu user command",
		"scope": "javascript,typescript"
	},
	"Class message command": {
		"body": [
			"const { Command } = require('../../classes');",
			"const { Message } = require('discord.js');",
			"",
			"module.exports = class extends Command {",
			"  constructor(...args) {",
			"    super(...args, {",
			"      name: '${1:name}',",
			"      description: '${2:description}',",
			"    });",
			"  }",
			"",
			"  /** @param {Message} message */",
			"  async execute(message) {",
			"    $0",
			"  }",
			"};",
		],
		"description": "class to message command snippet",
		"prefix": "class message command",
		"scope": "javascript,typescript"
	},
	"Class slash command": {
		"body": [
			"const { SlashCommandBuilder } = require('@discordjs/builders');",
			"const { CommandInteraction } = require('discord.js');",
			"",
			"module.exports = class extends SlashCommandBuilder {",
			"  constructor(client) {",
			"    super();",
			"    this.client = client;",
			"    this.data = this.setName('${1:name}')",
			"      .setDescription('${2:description}');",
			"  }",
			"",
			"  /** @param {CommandInteraction} interaction */",
			"  async execute(interaction) {",
			"    $0",
			"  }",
			"};",
		],
		"description": "class to slash command snippet",
		"prefix": "class slash command",
		"scope": "javascript,typescript"
	}
}