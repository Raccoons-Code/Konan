{
  // Place your Konan workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Class event": {
    "body": [
      "const { Event } = require('../classes');",
      "",
      "module.exports = class extends Event {",
      "  constructor(...args) {",
      "    super(...args, {",
      "      name: '${1:name}',",
      "    });",
      "  }",
      "",
      "  async execute(${2:params}) {",
      "    $0",
      "  }",
      "};"
    ],
    "description": "class to event snippet",
    "prefix": "class event",
    "scope": "javascript,typescript"
  },
  "Class button component": {
    "body": [
      "const { ButtonInteraction } = require('../../classes');",
      "",
      "module.exports = class extends ButtonInteraction {",
      "  constructor(...args) {",
      "    super(...args);",
      "    this.data = {",
      "      name: '${1:name}',",
      "      description: '${2:description}',",
      "    };",
      "  }",
      "",
      "  async execute(interaction = this.ButtonInteraction) {",
      "    $0",
      "  }",
      "};"
    ],
    "description": "class to button component snippet",
    "prefix": "class button component",
    "scope": "javascript,typescript"
  },
  "Class menu message context": {
    "body": [
      "const { MessageContextMenu } = require('../../classes');",
      "",
      "module.exports = class extends MessageContextMenu {",
      "  constructor(...args) {",
      "    super(...args);",
      "    this.data = this.setName('${1:name}')",
      "      .setType(3);",
      "  }",
      "",
      "  async execute(interaction = this.MessageContextMenuInteraction) {",
      "    $0",
      "  }",
      "};"
    ],
    "description": "class to menu context snippet",
    "prefix": "class menu message context",
    "scope": "javascript,typescript"
  },
  "Class menu user context": {
    "body": [
      "const { UserContextMenu } = require('../../classes');",
      "",
      "module.exports = class extends UserContextMenu {",
      "  constructor(...args) {",
      "    super(...args);",
      "    this.data = this.setName('${1:name}')",
      "      .setType(2);",
      "  }",
      "",
      "  async execute(interaction = this.UserContextMenuInteraction) {",
      "    $0",
      "  }",
      "};"
    ],
    "description": "class to menu context snippet",
    "prefix": "class menu user context",
    "scope": "javascript,typescript"
  },
  "Class message command": {
    "body": [
      "const { Command } = require('../../classes');",
      "",
      "module.exports = class extends Command {",
      "  constructor(...args) {",
      "    super(...args, {",
      "      name: '${1:name}',",
      "      aliases: [$2],",
      "      description: '${3:description}',",
      "      args: [$4],",
      "      clientPermissions: [$5],",
      "      userPermissions: [$6],",
      "      emoji: ${7:null},",
      "    });",
      "  }",
      "",
      "  async execute(message = this.Message) {",
      "    $0",
      "  }",
      "};"
    ],
    "description": "class to message command snippet",
    "prefix": "class message command",
    "scope": "javascript,typescript"
  },
  "Class select component": {
    "body": [
      "const { SelectMenuInteraction } = require('../../classes');",
      "",
      "module.exports = class extends SelectMenuInteraction {",
      "  constructor(...args) {",
      "    super(...args);",
      "    this.data = {",
      "      name: '${1:name}',",
      "      description: '${2:description}',",
      "    };",
      "  }",
      "",
      "  async execute(interaction = this.SelectMenuInteraction) {",
      "    $0",
      "  }",
      "};"
    ],
    "description": "class to select component snippet",
    "prefix": "class select component",
    "scope": "javascript,typescript"
  },
  "Class slash command": {
    "body": [
      "const { SlashCommand } = require('../../classes');",
      "",
      "module.exports = class extends SlashCommand {",
      "  constructor(...args) {",
      "    super(...args);",
      "    this.data = this.setName('${1:name}')",
      "      .setDescription('${2:description}')$3;",
      "  }",
      "",
      "  async execute(interaction = this.CommandInteraction) {",
      "    $0",
      "  }",
      "};"
    ],
    "description": "class to slash command snippet",
    "prefix": "class slash command",
    "scope": "javascript,typescript"
  }
}
